---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the baseline infrastructure
             to be used in the App Mesh Workshop.

Mappings:

  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'

  InstanceMap:
    us-east-1:
      AMI: 'ami-0b69ea66ff7391e80'
    us-east-2:
      AMI: 'ami-00c03f7f7f2ec15c3'
    us-west-1:
      AMI: 'ami-0245d318c6788de52'
    us-west-2:
      AMI: 'ami-04b762b4289fba92b'

Resources:
        
  Crystal:
    Type: AWS::ECR::Repository

  NodeJS:
    Type: AWS::ECR::Repository

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub Cluster-${AWS::StackName}

  CrystalLogGroup:
    Type: AWS::Logs::LogGroup

  CrystalTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Cpu: 256
      ExecutionRoleArn: !GetAtt ECSServiceRole.Arn
      Family: !Sub Crystal-Service-${AWS::StackName} 
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: crystal-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Crystal}:latest
          PortMappings:
            - ContainerPort: 3000
              Protocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CrystalLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: awslogs-crystal-service
          Essential: true

  ExternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-ExternalLoadBalancer-${AWS::StackName}
      GroupDescription: Access to the external load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  ExternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ExtLB-${AWS::StackName}
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ExternalLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  ExternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref RubyTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 80
      Protocol: HTTP

  RubyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub VPC-${AWS::StackName}

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PublicOne-${AWS::StackName}
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PublicTwo-${AWS::StackName}

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub PrivateOne-${AWS::StackName}
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub PrivateTwo-${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-VPCEndpoint-${AWS::StackName}
      GroupDescription: Access to the VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            IpProtocol: -1

  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ec2' ] ]
      VpcId: !Ref VPC

  ECRAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ecr.api' ] ]
      VpcId: !Ref VPC

  ECRDKREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ecr.dkr' ] ]
      VpcId: !Ref VPC

  EnvoyEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.appmesh-envoy-management' ] ]
      VpcId: !Ref VPC

  CloudWatchEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.logs' ] ]
      VpcId: !Ref VPC

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-Container-${AWS::StackName}
      GroupDescription: Access to the containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            IpProtocol: -1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ECSServiceRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              - 'iam:PassRole'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'logs:DescribeLogStreams'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: 
            - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ECSTaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
                - 'appmesh:StreamAggregatedResources'
                - 'xray:PutTraceSegments'
                - 'xray:PutTelemetryRecords'
                - 'xray:GetSamplingRules'
                - 'xray:GetSamplingTargets'
                - 'xray:GertSamplingStatisticSumaries'
              Resource: '*'
  
  KeyPairHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt KeyPairHelperExecutionRole.Arn
      Runtime: python3.7
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
            ec2 = boto3.client('ec2')
            ssm = boto3.client('ssm')

            data = {}

            keyname = event['ResourceProperties']['KeyName']
            keyid = event['ResourceProperties']['KeyId']

            paramName = '/appmeshworkshop/keypair/{}'.format(keyname)

            try:

              if (event["RequestType"] == 'Delete'):
                ssm.delete_parameter(Name = paramName)
                ec2.delete_key_pair(KeyName=keyname)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data)

              if (event["RequestType"] == 'Create'):
                response = ec2.create_key_pair(KeyName=keyname)
                ssm.put_parameter(
                  Name = paramName,
                  Value = response['KeyMaterial'],
                  Type = 'SecureString',
                  KeyId = keyid,
                  Overwrite = True
                )
                data['Name'] = keyname
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data)

            except Exception as e:
              errorMessage = e.response['Error']['Message']
              data['Message'] = errorMessage
              cfnresponse.send(event, context, cfnresponse.FAILED, data)

  KeyPairHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: KeyPairHelperExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow 
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - 'ec2:CreateKeyPair'
                  - 'ec2:DeleteKeyPair'
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                  - 'kms:Encrypt'
                Resource: "*"

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: master-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root              
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: "*"
          - Sid: Allow Use of the Key
            Effect: Allow
            Principal:          
              AWS: 
                - !GetAtt KeyPairHelperExecutionRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/appmeshworkshop
      TargetKeyId: !Ref KMSKey

  KeyPair:
    Type: Custom::KeyPairHelperLambda
    Properties:
      ServiceToken: !GetAtt KeyPairHelperLambda.Arn
      KeyName: id_rsa
      KeyId: !Ref KMSKey
                      
  EC2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: EC2InstanceRolePolicy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'appmesh:StreamAggregatedResources'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GertSamplingStatisticSumaries'
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            SourceSecurityGroupId: !Ref ExternalLoadBalancerSecurityGroup
            FromPort: 3000
            ToPort: 3000
          - IpProtocol: tcp
            CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            FromPort: 22
            ToPort: 22

  RubyEC2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - KeyPair
      - PrivateRouteOne
      - PrivateRouteTwo
    Properties:
      LaunchTemplateName: !Sub Ruby-EC2Instance-LaunchTemplate-${AWS::StackName}
      LaunchTemplateData:
        KeyName: !GetAtt KeyPair.Name
        ImageId: 
          Fn::FindInMap:
            - InstanceMap
            - !Ref AWS::Region
            - AMI        
        InstanceType: t2.medium
        InstanceInitiatedShutdownBehavior: terminate
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds: 
          - !Ref EC2InstanceSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              -
                - |
                  #!/bin/bash -ex
                  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

                  # Install required libs
                  yum install -y git gcc gcc-c++ make readline-devel openssl-devel sqlite-devel gmp-devel jq
                  
                  # Install rbenv
                  git clone git://github.com/rbenv/rbenv.git /tmp/.rbenv
                  echo 'export PATH="/tmp/.rbenv/bin:/usr/local/bin:$PATH"' >> /tmp/.bashrc
                  echo 'eval "$(rbenv init -)"' >> /tmp/.bashrc
                  source /tmp/.bashrc

                  # Install ruby-build
                  git clone git://github.com/rbenv/ruby-build.git /tmp/ruby-build
                  cd /tmp/ruby-build
                  ./install.sh

                  rbenv install 2.5.1 && rbenv global 2.5.1

                  # Install rails and bundler
                  gem install --force rails bundler
                  gem update --system

                  # Clone the repo and build the app
                  git clone https://github.com/brentley/ecsdemo-frontend.git /tmp/ecsdemo-frontend
                  cd /tmp/ecsdemo-frontend
                  bundle install
                  
                  # Run at boot
                  sed -i '$ d' startup.sh && echo 'rails s -e production -b 0.0.0.0' >> startup.sh
                  nohup ./startup.sh &
                - |
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub Ruby-EC2Instance-${AWS::StackName}

  RubyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub Ruby-AutoScalingGroup-${AWS::StackName}
      HealthCheckGracePeriod: 300
      DesiredCapacity: 2
      LaunchTemplate: 
        LaunchTemplateId: !Ref RubyEC2InstanceLaunchTemplate
        Version: !GetAtt RubyEC2InstanceLaunchTemplate.LatestVersionNumber 
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref RubyTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-InternalLoadBalancer-${AWS::StackName}
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            FromPort: 3000
            ToPort: 3000

  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub IntLB-${AWS::StackName}
      Scheme: internal
      Type: application
      SecurityGroups:
        - !Ref InternalLoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

  InternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CrystalTargetGroup
          Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 3000
      Protocol: HTTP

  CrystalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties: 
      HostedZoneConfig: 
        Comment: !Sub App Mesh Workshop private DNS zone
      Name:  appmeshworkshop.local
      VPCs:
      - VPCId: !Ref VPC
        VPCRegion: !Ref AWS::Region

  CrystalRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: crystal.appmeshworkshop.local
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt InternalLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt InternalLoadBalancer.DNSName

Outputs:
  InternalLoadBalancerDNS:
    Description: The DNS for the internal load balancer
    Value: !GetAtt InternalLoadBalancer.DNSName
  ExternalLoadBalancerDNS:
    Description: The DNS for the external load balancer
    Value: !GetAtt ExternalLoadBalancer.DNSName    
  PrivateSubnetOne:
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwo:
    Value: !Ref PrivateSubnetTwo
  EcsClusterName:
    Value: !Ref ECSCluster
  StackName:
    Value: !Sub ${AWS::StackName}
  CrystalTaskDefinition:
    Value: !Ref CrystalTaskDefinition
  RubyTargetGroupArn:
    Value: !Ref RubyTargetGroup
  CrystalTargetGroupArn:
    Value: !Ref CrystalTargetGroup
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup
  CrystalEcrRepo:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Crystal}
  NodeJSEcrRepo:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${NodeJS}