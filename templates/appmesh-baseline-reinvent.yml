---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the baseline infrastructure
             to be used in the App Mesh Workshop.

Parameters:

  Cloud9IAMRoleName: 
    Type: String
    Default: AppMesh-Workshop-Admin

  Cloud9SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    
  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.
    
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:

  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PublicThree:
      CIDR: '10.0.2.0/24'
    PrivateOne:
      CIDR: '10.0.100.0/24'
    PrivateTwo:
      CIDR: '10.0.101.0/24'
    PrivateThree:
      CIDR: '10.0.102.0/24'

Resources:

  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 30
      InstanceType: t2.small
      Name: !Sub Project-${AWS::StackName}
      SubnetId: !Ref Cloud9SubnetId

  Cloud9IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Cloud9IAMRoleName
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /  
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  EksServiceRole:
    Description: Allows EKS to manage clusters on your behalf.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy


  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Cloud9IAMRole

  Crystal:
    Type: AWS::ECR::Repository

  NodeJS:
    Type: AWS::ECR::Repository

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub cluster-${AWS::StackName}
  
  EksControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: appmesh-workshop
      Version: "1.14"
      RoleArn: !GetAtt EksServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EksControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo
          - !Ref PrivateSubnetThree

  EksServiceRole:
    Description: Allows EKS to manage clusters on your behalf.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EksControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC  

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole
  
  PolicyALBIngress:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
       - 'acm:DescribeCertificate'
       - 'acm:ListCertificates'
       - 'acm:GetCertificate'
       - 'ec2:AuthorizeSecurityGroupIngress'
       - 'ec2:CreateSecurityGroup'
       - 'ec2:CreateTags'
       - 'ec2:DeleteTags'
       - 'ec2:DeleteSecurityGroup'
       - 'ec2:DescribeAccountAttributes'
       - 'ec2:DescribeAddresses'
       - 'ec2:DescribeInstances'
       - 'ec2:DescribeInstanceStatus'
       - 'ec2:DescribeInternetGateways'
       - 'ec2:DescribeNetworkInterfaces'
       - 'ec2:DescribeSecurityGroups'
       - 'ec2:DescribeSubnets'
       - 'ec2:DescribeTags'
       - 'ec2:DescribeVpcs'
       - 'ec2:ModifyInstanceAttribute'
       - 'ec2:ModifyNetworkInterfaceAttribute'
       - 'ec2:RevokeSecurityGroupIngress'
       - 'elasticloadbalancing:AddListenerCertificates'
       - 'elasticloadbalancing:AddTags'
       - 'elasticloadbalancing:CreateListener'
       - 'elasticloadbalancing:CreateLoadBalancer'
       - 'elasticloadbalancing:CreateRule'
       - 'elasticloadbalancing:CreateTargetGroup'
       - 'elasticloadbalancing:DeleteListener'
       - 'elasticloadbalancing:DeleteLoadBalancer'
       - 'elasticloadbalancing:DeleteRule'
       - 'elasticloadbalancing:DeleteTargetGroup'
       - 'elasticloadbalancing:DeregisterTargets'
       - 'elasticloadbalancing:DescribeListenerCertificates'
       - 'elasticloadbalancing:DescribeListeners'
       - 'elasticloadbalancing:DescribeLoadBalancers'
       - 'elasticloadbalancing:DescribeLoadBalancerAttributes'
       - 'elasticloadbalancing:DescribeRules'
       - 'elasticloadbalancing:DescribeSSLPolicies'
       - 'elasticloadbalancing:DescribeTags'
       - 'elasticloadbalancing:DescribeTargetGroups'
       - 'elasticloadbalancing:DescribeTargetGroupAttributes'
       - 'elasticloadbalancing:DescribeTargetHealth'
       - 'elasticloadbalancing:ModifyListener'
       - 'elasticloadbalancing:ModifyLoadBalancerAttributes'
       - 'elasticloadbalancing:ModifyRule'
       - 'elasticloadbalancing:ModifyTargetGroup'
       - 'elasticloadbalancing:ModifyTargetGroupAttributes'
       - 'elasticloadbalancing:RegisterTargets'
       - 'elasticloadbalancing:RemoveListenerCertificates'
       - 'elasticloadbalancing:RemoveTags'
       - 'elasticloadbalancing:SetIpAddressType'
       - 'elasticloadbalancing:SetSecurityGroups'
       - 'elasticloadbalancing:SetSubnets'
       - 'elasticloadbalancing:SetWebACL'
       - 'iam:CreateServiceLinkedRole'
       - 'iam:GetServerCertificate'
       - 'iam:ListServerCertificates'
       - 'waf-regional:GetWebACLForResource'
       - 'waf-regional:GetWebACL'
       - 'waf-regional:AssociateWebACL'
       - 'waf-regional:DisassociateWebACL'
       - 'tag:GetResources'
       - 'tag:TagResources'
       - 'waf:GetWebACL'
      Effect: Allow
      Resource: '*'
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyALBIngress
    Roles:
     - !Ref NodeInstanceRole
   
  PolicyAppMesh:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
       - 'appmesh:*'
       - 'servicediscovery:CreateService'
       - 'servicediscovery:GetService'
       - 'servicediscovery:RegisterInstance'
       - 'servicediscovery:DeregisterInstance'
       - 'servicediscovery:ListInstances'
       - 'servicediscovery:ListNamespaces'
       - 'route53:GetHealthCheck'
       - 'route53:CreateHealthCheck'
       - 'route53:UpdateHealthCheck'
       - 'route53:ChangeResourceRecordSets'
       - 'route53:DeleteHealthCheck'
      Effect: Allow
      Resource: '*'
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyAppMesh
    Roles:
     - !Ref NodeInstanceRole
    
  PolicyAutoScaling:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
       - 'autoscaling:DescribeAutoScalingGroups'
       - 'autoscaling:DescribeAutoScalingInstances'
       - 'autoscaling:DescribeLaunchConfigurations'
       - 'autoscaling:DescribeTags'
       - 'autoscaling:SetDesiredCapacity'
       - 'autoscaling:TerminateInstanceInAutoScalingGroup'
       - 'ec2:DescribeLaunchTemplateVersions'
      Effect: Allow
      Resource: '*'
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyAutoScaling
    Roles:
      - !Ref NodeInstanceRole

  PolicyExternalDNSChangeSet:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
       - 'route53:ChangeResourceRecordSets'
      Effect: Allow
      Resource: arn:aws:route53:::hostedzone/*
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyExternalDNSChangeSet
    Roles:
     - !Ref NodeInstanceRole

  PolicyExternalDNSHostedZones:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
       - 'route53:ListHostedZones'
       - 'route53:ListResourceRecordSets'
      Effect: Allow
      Resource: '*'
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyExternalDNSHostedZones
    Roles:
    - !Ref NodeInstanceRole

  PolicyXRay:
   Type: AWS::IAM::Policy
   Properties:
    PolicyDocument:
     Statement:
      Action:
      - 'xray:PutTraceSegments'
      - 'xray:PutTelemetryRecords'
      - 'xray:GetSamplingRules'
      - 'xray:GetSamplingTargets'
      - 'xray:GetSamplingStatisticSummaries'
      Effect: Allow
      Resource: '*'
     Version: "2012-10-17"
    PolicyName: !Sub ${AWS::StackName}-PolicyXRay
    Roles:
     - !Ref NodeInstanceRole      

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/appmesh-workshop
          Value: owned
      VpcId: !Ref VPC

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref EksControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref EksControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref EksControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EksControlPlaneSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EksControlPlaneSecurityGroup
      ToPort: 443

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: 
      - KeyPair
      - EksControlPlane
    Properties:
      AssociatePublicIpAddress: "false"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 20
            VolumeType: gp2
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageIdSSMParam
      InstanceType: t2.micro
      KeyName: !GetAtt KeyPair.Name
      SecurityGroups:
        - Ref: NodeSecurityGroup
      UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              -
                - |
                  #!/bin/bash
                  set -o xtrace
                  /etc/eks/bootstrap.sh appmesh-workshop
                  /opt/aws/bin/cfn-signal --exit-code $? \
                          --stack  ${AWS::StackName} \
                          --resource NodeGroup  \
                          --region ${AWS::Region}
                - |
  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 3
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MaxSize: 10
      MinSize: 3
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value: appmesh-workshop-node-group
        - Key: !Sub kubernetes.io/cluster/appmesh-workshop
          PropagateAtLaunch: "true"
          Value: owned
      VPCZoneIdentifier:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo
          - !Ref PrivateSubnetThree
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 3
        PauseTime: PT5M
  
  CrystalTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Cpu: 256
      ExecutionRoleArn: !GetAtt ECSServiceRole.Arn
      Family: !Sub crystal-task-${AWS::StackName} 
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: crystal-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Crystal}:vanilla
          PortMappings:
            - ContainerPort: 3000
              Protocol: http
          Essential: true
          HealthCheck:
            Command: 
              - CMD-SHELL
              - curl -s http://localhost:3000/health | grep -q Healthy!
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2

  ExternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-ExternalLoadBalancer-${AWS::StackName}
      GroupDescription: Access to the external load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  ExternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ExtLB-${AWS::StackName}
      Scheme: internet-facing
      Type: application
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'      
      SecurityGroups:
        - !Ref ExternalLoadBalancerSecurityGroup
      Subnets:
        - 
          !Ref PublicSubnetOne
        - 
          !Ref PublicSubnetTwo
        - 
          !Ref PublicSubnetThree

  ExternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref RubyTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 80
      Protocol: HTTP

  RubyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5      
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299      
      UnhealthyThresholdCount: 10
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
        - Key: slow_start.duration_seconds
          Value: '60'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub VPC-${AWS::StackName}

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PublicOne-${AWS::StackName}
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PublicTwo-${AWS::StackName}
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub PublicThree-${AWS::StackName}
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub PrivateOne-${AWS::StackName}
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub PrivateTwo-${AWS::StackName}
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub PrivateThree-${AWS::StackName}
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/appmesh-workshop
          Value: shared
        - Key: kubernetes.io/role/alb-ingress
          Value: 1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable

  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayThreeAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  NatGatewayThree:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId
      SubnetId: !Ref PublicSubnetThree
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo
  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteThree:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayThree
  PrivateRouteTableThreeAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      SubnetId: !Ref PrivateSubnetThree

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-VPCEndpoint-${AWS::StackName}
      GroupDescription: Access to the VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            IpProtocol: -1

  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ec2' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ec2messages' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  ECRAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ecr.api' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  ECRDKREndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ecr.dkr' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  EnvoyEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.appmesh-envoy-management' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  CloudWatchEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.logs' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ssm' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      ServiceName: !Join [ '', [ 'com.amazonaws.', { 'Ref': 'AWS::Region' }, '.ssmmessages' ] ]
      PrivateDnsEnabled: true
      VpcId: !Ref VPC

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-Container-${AWS::StackName}
      GroupDescription: Access to the containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            IpProtocol: -1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ECSServiceRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              - 'iam:PassRole'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'logs:DescribeLogStreams'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: 
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSTaskRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
                - 'appmesh:StreamAggregatedResources'
                - 'xray:PutTraceSegments'
                - 'xray:PutTelemetryRecords'
                - 'xray:GetSamplingRules'
                - 'xray:GetSamplingTargets'
                - 'xray:GertSamplingStatisticSumaries'
              Resource: '*'
  
  KeyPairHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt KeyPairHelperExecutionRole.Arn
      Runtime: python3.7
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
            ec2 = boto3.client('ec2')
            ssm = boto3.client('ssm')

            data = {}

            keyname = event['ResourceProperties']['KeyName']
            keyid = event['ResourceProperties']['KeyId']

            paramName = '/appmeshworkshop/keypair/{}'.format(keyname)

            try:

              if (event["RequestType"] == 'Delete'):
                ssm.delete_parameter(Name = paramName)
                ec2.delete_key_pair(KeyName=keyname)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data)

              if (event["RequestType"] == 'Create'):
                response = ec2.create_key_pair(KeyName=keyname)
                ssm.put_parameter(
                  Name = paramName,
                  Value = response['KeyMaterial'],
                  Type = 'SecureString',
                  KeyId = keyid,
                  Overwrite = True
                )
                data['Name'] = keyname
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data)

            except Exception as e:
              errorMessage = e.response['Error']['Message']
              data['Message'] = errorMessage
              cfnresponse.send(event, context, cfnresponse.FAILED, data)

  KeyPairHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: KeyPairHelperExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow 
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - 'ec2:CreateKeyPair'
                  - 'ec2:DeleteKeyPair'
                  - 'ssm:PutParameter'
                  - 'ssm:DeleteParameter'
                  - 'kms:Encrypt'
                Resource: "*"

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: master-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: "*"
          - Sid: Allow Use of the Key
            Effect: Allow
            Principal:          
              AWS: 
                - !GetAtt KeyPairHelperExecutionRole.Arn
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${Cloud9IAMRoleName}
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/appmeshworkshop
      TargetKeyId: !Ref KMSKey

  KeyPair:
    Type: Custom::KeyPairHelperLambda
    Properties:
      ServiceToken: !GetAtt KeyPairHelperLambda.Arn
      KeyName: id_rsa
      KeyId: !Ref KMSKey
                      
  EC2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
        MaxSessionDuration: 43200
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        Policies:
          - PolicyName: EC2InstanceRolePolicy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'appmesh:StreamAggregatedResources'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GertSamplingStatisticSumaries'
                  - 'servicediscovery:RegisterInstance'
                  - 'servicediscovery:DeregisterInstance'
                  - 'route53:CreateHealthCheck'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:UpdateHealthCheck'
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            IpProtocol: -1
          - IpProtocol: tcp
            CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22

  RubyEC2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - KeyPair
      - PublicRoute
    Properties:
      LaunchTemplateName: !Sub Ruby-EC2Instance-LaunchTemplate-${AWS::StackName}
      LaunchTemplateData:
        KeyName: !GetAtt KeyPair.Name
        ImageId: !Ref LatestAmiId
        InstanceType: t2.medium
        InstanceInitiatedShutdownBehavior: terminate
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds: 
          - !Ref EC2InstanceSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
              - "\n"
              -
                - |
                  #!/bin/bash -ex
                  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

                  # Install required libs
                  yum install -y git gcc gcc-c++ make readline-devel openssl-devel sqlite-devel gmp-devel jq
                  
                  # Install rbenv
                  git clone git://github.com/rbenv/rbenv.git /tmp/.rbenv
                  echo 'export PATH="/tmp/.rbenv/bin:/usr/local/bin:$PATH"' >> /tmp/.bashrc
                  echo 'eval "$(rbenv init -)"' >> /tmp/.bashrc
                  source /tmp/.bashrc

                  # Install ruby-build
                  git clone git://github.com/rbenv/ruby-build.git /tmp/ruby-build
                  cd /tmp/ruby-build
                  ./install.sh

                  rbenv install 2.5.1 && rbenv global 2.5.1

                  # Install rails and bundler
                  gem install --force rails bundler
                  gem update --system

                  # Clone the repo and build the app
                  export RUBY_ROOT=/tmp/ecsdemo-frontend
                  git clone https://github.com/ffeijoo/ecsdemo-frontend.git /tmp/ecsdemo-frontend
                  cd $RUBY_ROOT
                  bundle install

                  # Set environment variables for routing
                  export MESH_RUN='true'
                  export CRYSTAL_URL='http://crystal.appmeshworkshop.hosted.local:3000/crystal'
                  export NODEJS_URL='http://nodejs.appmeshworkshop.hosted.local:3000'

                  # Run at boot
                  sed -i '$ d' startup.sh && echo 'rails s -e production -b 0.0.0.0' >> startup.sh
                  nohup ./startup.sh &
                  
                - |                  

        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub Ruby-EC2Instance-${AWS::StackName}

  RubyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub Ruby-AutoScalingGroup-${AWS::StackName}
      HealthCheckGracePeriod: 300
      DesiredCapacity: 3
      LaunchTemplate: 
        LaunchTemplateId: !Ref RubyEC2InstanceLaunchTemplate
        Version: !GetAtt RubyEC2InstanceLaunchTemplate.LatestVersionNumber 
      MaxSize: 3
      MinSize: 3
      TargetGroupARNs: 
        - !Ref RubyTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
        - !Ref PublicSubnetThree

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroup-InternalLoadBalancer-${AWS::StackName}
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
            FromPort: 3000
            ToPort: 3000

  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub IntLB-${AWS::StackName}
      Scheme: internal
      Type: application
      SecurityGroups:
        - !Ref InternalLoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree

  InternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CrystalTargetGroup
          Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 3000
      Protocol: HTTP

  CrystalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip

  DnsHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: appmeshworkshop.hosted.local
      HostedZoneConfig:
        Comment: Private hosted zone
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region

  CrystalRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - InternalLoadBalancer
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt InternalLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt InternalLoadBalancer.DNSName
      HostedZoneId: !Ref DnsHostedZone
      Name: crystal.appmeshworkshop.hosted.local
      Type: A

Outputs:
  InternalLoadBalancerDNS:
    Description: The DNS for the internal load balancer
    Value: !GetAtt InternalLoadBalancer.DNSName
  InternalLoadBalancerArn:
    Description: The ARN for the internal load balancer
    Value: !Ref InternalLoadBalancer
  ExternalLoadBalancerDNS:
    Description: The DNS for the external load balancer
    Value: !GetAtt ExternalLoadBalancer.DNSName
  VpcId:
    Value: !Ref VPC
  PrivateSubnetOne:
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwo:
    Value: !Ref PrivateSubnetTwo
  PrivateSubnetThree:
    Value: !Ref PrivateSubnetThree
  EcsClusterName:
    Value: !Ref ECSCluster
  StackName:
    Value: !Sub ${AWS::StackName}
  CrystalTaskDefinition:
    Value: !Ref CrystalTaskDefinition
  RubyTargetGroupArn:
    Value: !Ref RubyTargetGroup
  CrystalTargetGroupArn:
    Value: !Ref CrystalTargetGroup
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup
  CrystalEcrRepo:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Crystal}
  NodeJSEcrRepo:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${NodeJS}
  RubyAutoScalingGroupName:
    Value: !Ref RubyAutoScalingGroup
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
  EKSClusterName:
    Description: The EKS Cluster
    Value: !Ref EksControlPlane